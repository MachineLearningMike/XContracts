/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKeep3rJobFundableLiquidityInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidityToJob(address,address,uint256)": FunctionFragment;
    "approveLiquidity(address)": FunctionFragment;
    "approvedLiquidities()": FunctionFragment;
    "forceLiquidityCreditsToJob(address,uint256)": FunctionFragment;
    "jobLiquidityCredits(address)": FunctionFragment;
    "jobPeriodCredits(address)": FunctionFragment;
    "liquidityAmount(address,address)": FunctionFragment;
    "observeLiquidity(address)": FunctionFragment;
    "quoteLiquidity(address,uint256)": FunctionFragment;
    "revokeLiquidity(address)": FunctionFragment;
    "rewardedAt(address)": FunctionFragment;
    "totalJobCredits(address)": FunctionFragment;
    "unbondLiquidityFromJob(address,address,uint256)": FunctionFragment;
    "withdrawLiquidityFromJob(address,address,address)": FunctionFragment;
    "workedAt(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidityToJob",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedLiquidities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceLiquidityCreditsToJob",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobLiquidityCredits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jobPeriodCredits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "observeLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewardedAt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalJobCredits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondLiquidityFromJob",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityFromJob",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "workedAt", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityToJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedLiquidities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceLiquidityCreditsToJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobLiquidityCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobPeriodCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "observeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardedAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalJobCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondLiquidityFromJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityFromJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workedAt", data: BytesLike): Result;

  events: {
    "LiquidityAddition(address,address,address,uint256)": EventFragment;
    "LiquidityApproval(address)": EventFragment;
    "LiquidityCreditsForced(address,uint256,uint256)": EventFragment;
    "LiquidityCreditsReward(address,uint256,uint256,uint256)": EventFragment;
    "LiquidityRevocation(address)": EventFragment;
    "LiquidityWithdrawal(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityCreditsForced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityCreditsReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRevocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWithdrawal"): EventFragment;
}

export type LiquidityAdditionEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _liquidity: string;
    _provider: string;
    _amount: BigNumber;
  }
>;

export type LiquidityApprovalEvent = TypedEvent<
  [string] & { _liquidity: string }
>;

export type LiquidityCreditsForcedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _job: string;
    _rewardedAt: BigNumber;
    _currentCredits: BigNumber;
  }
>;

export type LiquidityCreditsRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _job: string;
    _rewardedAt: BigNumber;
    _currentCredits: BigNumber;
    _periodCredits: BigNumber;
  }
>;

export type LiquidityRevocationEvent = TypedEvent<
  [string] & { _liquidity: string }
>;

export type LiquidityWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _liquidity: string;
    _receiver: string;
    _amount: BigNumber;
  }
>;

export class IKeep3rJobFundableLiquidity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKeep3rJobFundableLiquidityInterface;

  functions: {
    addLiquidityToJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedLiquidities(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _list: string[] }>;

    forceLiquidityCreditsToJob(
      _job: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jobLiquidityCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    jobPeriodCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    liquidityAmount(
      _job: string,
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    observeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          current: BigNumber;
          difference: BigNumber;
          period: BigNumber;
        }
      ] & {
        _tickCache: [BigNumber, BigNumber, BigNumber] & {
          current: BigNumber;
          difference: BigNumber;
          period: BigNumber;
        };
      }
    >;

    quoteLiquidity(
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _periodCredits: BigNumber }>;

    revokeLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardedAt(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timestamp: BigNumber }>;

    totalJobCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    unbondLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workedAt(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timestamp: BigNumber }>;
  };

  addLiquidityToJob(
    _job: string,
    _liquidity: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveLiquidity(
    _liquidity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedLiquidities(overrides?: CallOverrides): Promise<string[]>;

  forceLiquidityCreditsToJob(
    _job: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jobLiquidityCredits(
    _job: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  jobPeriodCredits(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidityAmount(
    _job: string,
    _liquidity: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  observeLiquidity(
    _liquidity: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      current: BigNumber;
      difference: BigNumber;
      period: BigNumber;
    }
  >;

  quoteLiquidity(
    _liquidity: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  revokeLiquidity(
    _liquidity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardedAt(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalJobCredits(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

  unbondLiquidityFromJob(
    _job: string,
    _liquidity: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidityFromJob(
    _job: string,
    _liquidity: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workedAt(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addLiquidityToJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedLiquidities(overrides?: CallOverrides): Promise<string[]>;

    forceLiquidityCreditsToJob(
      _job: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    jobLiquidityCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobPeriodCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityAmount(
      _job: string,
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    observeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        current: BigNumber;
        difference: BigNumber;
        period: BigNumber;
      }
    >;

    quoteLiquidity(
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardedAt(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalJobCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbondLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    workedAt(_job: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LiquidityAddition(address,address,address,uint256)"(
      _job?: string | null,
      _liquidity?: string | null,
      _provider?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _job: string;
        _liquidity: string;
        _provider: string;
        _amount: BigNumber;
      }
    >;

    LiquidityAddition(
      _job?: string | null,
      _liquidity?: string | null,
      _provider?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _job: string;
        _liquidity: string;
        _provider: string;
        _amount: BigNumber;
      }
    >;

    "LiquidityApproval(address)"(
      _liquidity?: null
    ): TypedEventFilter<[string], { _liquidity: string }>;

    LiquidityApproval(
      _liquidity?: null
    ): TypedEventFilter<[string], { _liquidity: string }>;

    "LiquidityCreditsForced(address,uint256,uint256)"(
      _job?: string | null,
      _rewardedAt?: null,
      _currentCredits?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _job: string; _rewardedAt: BigNumber; _currentCredits: BigNumber }
    >;

    LiquidityCreditsForced(
      _job?: string | null,
      _rewardedAt?: null,
      _currentCredits?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _job: string; _rewardedAt: BigNumber; _currentCredits: BigNumber }
    >;

    "LiquidityCreditsReward(address,uint256,uint256,uint256)"(
      _job?: string | null,
      _rewardedAt?: null,
      _currentCredits?: null,
      _periodCredits?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _job: string;
        _rewardedAt: BigNumber;
        _currentCredits: BigNumber;
        _periodCredits: BigNumber;
      }
    >;

    LiquidityCreditsReward(
      _job?: string | null,
      _rewardedAt?: null,
      _currentCredits?: null,
      _periodCredits?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _job: string;
        _rewardedAt: BigNumber;
        _currentCredits: BigNumber;
        _periodCredits: BigNumber;
      }
    >;

    "LiquidityRevocation(address)"(
      _liquidity?: null
    ): TypedEventFilter<[string], { _liquidity: string }>;

    LiquidityRevocation(
      _liquidity?: null
    ): TypedEventFilter<[string], { _liquidity: string }>;

    "LiquidityWithdrawal(address,address,address,uint256)"(
      _job?: string | null,
      _liquidity?: string | null,
      _receiver?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _job: string;
        _liquidity: string;
        _receiver: string;
        _amount: BigNumber;
      }
    >;

    LiquidityWithdrawal(
      _job?: string | null,
      _liquidity?: string | null,
      _receiver?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _job: string;
        _liquidity: string;
        _receiver: string;
        _amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    addLiquidityToJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedLiquidities(overrides?: CallOverrides): Promise<BigNumber>;

    forceLiquidityCreditsToJob(
      _job: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jobLiquidityCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobPeriodCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityAmount(
      _job: string,
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    observeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteLiquidity(
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardedAt(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalJobCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbondLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workedAt(_job: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidityToJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedLiquidities(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceLiquidityCreditsToJob(
      _job: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jobLiquidityCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobPeriodCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityAmount(
      _job: string,
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    observeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteLiquidity(
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardedAt(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalJobCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unbondLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workedAt(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
