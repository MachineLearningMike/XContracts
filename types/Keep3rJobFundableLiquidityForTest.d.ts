/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface Keep3rJobFundableLiquidityForTestInterface
  extends ethers.utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "acceptJobOwnership(address)": FunctionFragment;
    "addDisputer(address)": FunctionFragment;
    "addLiquidityToJob(address,address,uint256)": FunctionFragment;
    "addSlasher(address)": FunctionFragment;
    "approveLiquidity(address)": FunctionFragment;
    "approvedLiquidities()": FunctionFragment;
    "bondTime()": FunctionFragment;
    "bonds(address,address)": FunctionFragment;
    "canActivateAfter(address,address)": FunctionFragment;
    "canWithdrawAfter(address,address)": FunctionFragment;
    "changeJobOwnership(address,address)": FunctionFragment;
    "disputers(address)": FunctionFragment;
    "disputes(address)": FunctionFragment;
    "fee()": FunctionFragment;
    "firstSeen(address)": FunctionFragment;
    "forceLiquidityCreditsToJob(address,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "hasBonded(address)": FunctionFragment;
    "inflationPeriod()": FunctionFragment;
    "internalJobLiquidities(address)": FunctionFragment;
    "internalSettleJobAccountance(address)": FunctionFragment;
    "jobLiquidityCredits(address)": FunctionFragment;
    "jobOwner(address)": FunctionFragment;
    "jobPendingOwner(address)": FunctionFragment;
    "jobPeriodCredits(address)": FunctionFragment;
    "jobTokenCredits(address,address)": FunctionFragment;
    "jobs()": FunctionFragment;
    "keep3rHelper()": FunctionFragment;
    "keep3rV1()": FunctionFragment;
    "keep3rV1Proxy()": FunctionFragment;
    "keepers()": FunctionFragment;
    "kp3rWethPool()": FunctionFragment;
    "liquidityAmount(address,address)": FunctionFragment;
    "liquidityMinimum()": FunctionFragment;
    "observeLiquidity(address)": FunctionFragment;
    "pendingBonds(address,address)": FunctionFragment;
    "pendingGovernance()": FunctionFragment;
    "pendingUnbonds(address,address)": FunctionFragment;
    "quoteLiquidity(address,uint256)": FunctionFragment;
    "removeDisputer(address)": FunctionFragment;
    "removeSlasher(address)": FunctionFragment;
    "revokeLiquidity(address)": FunctionFragment;
    "rewardPeriodTime()": FunctionFragment;
    "rewardedAt(address)": FunctionFragment;
    "setApprovedLiquidity(address)": FunctionFragment;
    "setBondTime(uint256)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setInflationPeriod(uint256)": FunctionFragment;
    "setJob(address)": FunctionFragment;
    "setJobLiquidity(address,address)": FunctionFragment;
    "setKeep3rHelper(address)": FunctionFragment;
    "setKeep3rV1(address)": FunctionFragment;
    "setKeep3rV1Proxy(address)": FunctionFragment;
    "setKp3rWethPool(address)": FunctionFragment;
    "setLiquidityMinimum(uint256)": FunctionFragment;
    "setRevokedLiquidity(address)": FunctionFragment;
    "setRewardPeriodTime(uint256)": FunctionFragment;
    "setUnbondTime(uint256)": FunctionFragment;
    "slashers(address)": FunctionFragment;
    "totalJobCredits(address)": FunctionFragment;
    "unbondLiquidityFromJob(address,address,uint256)": FunctionFragment;
    "unbondTime()": FunctionFragment;
    "viewTickCache(address)": FunctionFragment;
    "viewTickOrder(address)": FunctionFragment;
    "withdrawLiquidityFromJob(address,address,address)": FunctionFragment;
    "workCompleted(address)": FunctionFragment;
    "workedAt(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptJobOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addDisputer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addLiquidityToJob",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addSlasher", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedLiquidities",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bondTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canActivateAfter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canWithdrawAfter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeJobOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "disputers", values: [string]): string;
  encodeFunctionData(functionFragment: "disputes", values: [string]): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "firstSeen", values: [string]): string;
  encodeFunctionData(
    functionFragment: "forceLiquidityCreditsToJob",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasBonded", values: [string]): string;
  encodeFunctionData(
    functionFragment: "inflationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "internalJobLiquidities",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "internalSettleJobAccountance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jobLiquidityCredits",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "jobOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "jobPendingOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jobPeriodCredits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jobTokenCredits",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keep3rHelper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keep3rV1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keep3rV1Proxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keepers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kp3rWethPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityMinimum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "observeLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingBonds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingUnbonds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDisputer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSlasher",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPeriodTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardedAt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setApprovedLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInflationPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setJob", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setJobLiquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeep3rHelper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setKeep3rV1", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKeep3rV1Proxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKp3rWethPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityMinimum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevokedLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPeriodTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbondTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "slashers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalJobCredits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondLiquidityFromJob",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewTickCache",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewTickOrder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityFromJob",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "workCompleted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "workedAt", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptJobOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDisputer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityToJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSlasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedLiquidities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canActivateAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canWithdrawAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeJobOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstSeen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceLiquidityCreditsToJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasBonded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inflationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalJobLiquidities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalSettleJobAccountance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobLiquidityCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jobPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobPeriodCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobTokenCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keep3rHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keep3rV1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keep3rV1Proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keepers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kp3rWethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "observeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingUnbonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDisputer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSlasher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPeriodTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardedAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInflationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setJobLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rV1Proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKp3rWethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevokedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPeriodTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnbondTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slashers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalJobCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondLiquidityFromJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbondTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewTickCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewTickOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityFromJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workedAt", data: BytesLike): Result;

  events: {
    "BondTimeChange(uint256)": EventFragment;
    "Bonding(address,address,uint256)": EventFragment;
    "DisputerAdded(address)": EventFragment;
    "DisputerRemoved(address)": EventFragment;
    "FeeChange(uint256)": EventFragment;
    "GovernanceProposal(address)": EventFragment;
    "GovernanceSet(address)": EventFragment;
    "InflationPeriodChange(uint256)": EventFragment;
    "JobOwnershipAssent(address,address,address)": EventFragment;
    "JobOwnershipChange(address,address,address)": EventFragment;
    "Keep3rHelperChange(address)": EventFragment;
    "Keep3rV1Change(address)": EventFragment;
    "Keep3rV1ProxyChange(address)": EventFragment;
    "Kp3rWethPoolChange(address)": EventFragment;
    "LiquidityAddition(address,address,address,uint256)": EventFragment;
    "LiquidityApproval(address)": EventFragment;
    "LiquidityCreditsForced(address,uint256,uint256)": EventFragment;
    "LiquidityCreditsReward(address,uint256,uint256,uint256)": EventFragment;
    "LiquidityMinimumChange(uint256)": EventFragment;
    "LiquidityRevocation(address)": EventFragment;
    "LiquidityWithdrawal(address,address,address,uint256)": EventFragment;
    "RewardPeriodTimeChange(uint256)": EventFragment;
    "SlasherAdded(address)": EventFragment;
    "SlasherRemoved(address)": EventFragment;
    "UnbondTimeChange(uint256)": EventFragment;
    "Unbonding(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BondTimeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bonding"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationPeriodChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobOwnershipAssent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobOwnershipChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rHelperChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rV1Change"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rV1ProxyChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Kp3rWethPoolChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityCreditsForced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityCreditsReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityMinimumChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRevocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPeriodTimeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlasherAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlasherRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnbondTimeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbonding"): EventFragment;
}

export type BondTimeChangeEvent = TypedEvent<
  [BigNumber] & { _bondTime: BigNumber }
>;

export type BondingEvent = TypedEvent<
  [string, string, BigNumber] & {
    _keeper: string;
    _bonding: string;
    _amount: BigNumber;
  }
>;

export type DisputerAddedEvent = TypedEvent<[string] & { _disputer: string }>;

export type DisputerRemovedEvent = TypedEvent<[string] & { _disputer: string }>;

export type FeeChangeEvent = TypedEvent<[BigNumber] & { _fee: BigNumber }>;

export type GovernanceProposalEvent = TypedEvent<
  [string] & { _pendingGovernance: string }
>;

export type GovernanceSetEvent = TypedEvent<[string] & { _governance: string }>;

export type InflationPeriodChangeEvent = TypedEvent<
  [BigNumber] & { _inflationPeriod: BigNumber }
>;

export type JobOwnershipAssentEvent = TypedEvent<
  [string, string, string] & {
    _job: string;
    _previousOwner: string;
    _newOwner: string;
  }
>;

export type JobOwnershipChangeEvent = TypedEvent<
  [string, string, string] & {
    _job: string;
    _owner: string;
    _pendingOwner: string;
  }
>;

export type Keep3rHelperChangeEvent = TypedEvent<
  [string] & { _keep3rHelper: string }
>;

export type Keep3rV1ChangeEvent = TypedEvent<[string] & { _keep3rV1: string }>;

export type Keep3rV1ProxyChangeEvent = TypedEvent<
  [string] & { _keep3rV1Proxy: string }
>;

export type Kp3rWethPoolChangeEvent = TypedEvent<
  [string] & { _kp3rWethPool: string }
>;

export type LiquidityAdditionEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _liquidity: string;
    _provider: string;
    _amount: BigNumber;
  }
>;

export type LiquidityApprovalEvent = TypedEvent<
  [string] & { _liquidity: string }
>;

export type LiquidityCreditsForcedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _job: string;
    _rewardedAt: BigNumber;
    _currentCredits: BigNumber;
  }
>;

export type LiquidityCreditsRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _job: string;
    _rewardedAt: BigNumber;
    _currentCredits: BigNumber;
    _periodCredits: BigNumber;
  }
>;

export type LiquidityMinimumChangeEvent = TypedEvent<
  [BigNumber] & { _liquidityMinimum: BigNumber }
>;

export type LiquidityRevocationEvent = TypedEvent<
  [string] & { _liquidity: string }
>;

export type LiquidityWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _job: string;
    _liquidity: string;
    _receiver: string;
    _amount: BigNumber;
  }
>;

export type RewardPeriodTimeChangeEvent = TypedEvent<
  [BigNumber] & { _rewardPeriodTime: BigNumber }
>;

export type SlasherAddedEvent = TypedEvent<[string] & { _slasher: string }>;

export type SlasherRemovedEvent = TypedEvent<[string] & { _slasher: string }>;

export type UnbondTimeChangeEvent = TypedEvent<
  [BigNumber] & { _unbondTime: BigNumber }
>;

export type UnbondingEvent = TypedEvent<
  [string, string, BigNumber] & {
    _keeperOrJob: string;
    _unbonding: string;
    _amount: BigNumber;
  }
>;

export class Keep3rJobFundableLiquidityForTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Keep3rJobFundableLiquidityForTestInterface;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptJobOwnership(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityToJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedLiquidities(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _list: string[] }>;

    bondTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canActivateAfter(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canWithdrawAfter(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeJobOwnership(
      _job: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    disputes(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstSeen(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    forceLiquidityCreditsToJob(
      _job: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    hasBonded(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    inflationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    internalJobLiquidities(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _list: string[] }>;

    internalSettleJobAccountance(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jobLiquidityCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _liquidityCredits: BigNumber }>;

    jobOwner(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    jobPendingOwner(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    jobPeriodCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _periodCredits: BigNumber }>;

    jobTokenCredits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    jobs(overrides?: CallOverrides): Promise<[string[]] & { _list: string[] }>;

    keep3rHelper(overrides?: CallOverrides): Promise<[string]>;

    keep3rV1(overrides?: CallOverrides): Promise<[string]>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<[string]>;

    keepers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _list: string[] }>;

    kp3rWethPool(overrides?: CallOverrides): Promise<[string]>;

    liquidityAmount(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidityMinimum(overrides?: CallOverrides): Promise<[BigNumber]>;

    observeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          current: BigNumber;
          difference: BigNumber;
          period: BigNumber;
        }
      ] & {
        _tickCache: [BigNumber, BigNumber, BigNumber] & {
          current: BigNumber;
          difference: BigNumber;
          period: BigNumber;
        };
      }
    >;

    pendingBonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    pendingUnbonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quoteLiquidity(
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _periodCredits: BigNumber }>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPeriodTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardedAt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovedLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondTime(
      _bondTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInflationPeriod(
      _inflationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJobLiquidity(
      _job: string,
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rHelper(
      _keep3rHelper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rV1(
      _keep3rV1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKp3rWethPool(
      _kp3rWethPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityMinimum(
      _liquidityMinimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevokedLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardPeriodTime(
      _rewardPeriodTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnbondTime(
      _unbondTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    totalJobCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _credits: BigNumber }>;

    unbondLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbondTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewTickCache(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          current: BigNumber;
          difference: BigNumber;
          period: BigNumber;
        }
      ] & {
        _tickCache: [BigNumber, BigNumber, BigNumber] & {
          current: BigNumber;
          difference: BigNumber;
          period: BigNumber;
        };
      }
    >;

    viewTickOrder(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workCompleted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workedAt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptJobOwnership(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDisputer(
    _disputer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityToJob(
    _job: string,
    _liquidity: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSlasher(
    _slasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveLiquidity(
    _liquidity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedLiquidities(overrides?: CallOverrides): Promise<string[]>;

  bondTime(overrides?: CallOverrides): Promise<BigNumber>;

  bonds(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canActivateAfter(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canWithdrawAfter(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeJobOwnership(
    _job: string,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  disputes(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  firstSeen(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  forceLiquidityCreditsToJob(
    _job: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  hasBonded(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  internalJobLiquidities(
    _job: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  internalSettleJobAccountance(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jobLiquidityCredits(
    _job: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  jobOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

  jobPendingOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

  jobPeriodCredits(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

  jobTokenCredits(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  jobs(overrides?: CallOverrides): Promise<string[]>;

  keep3rHelper(overrides?: CallOverrides): Promise<string>;

  keep3rV1(overrides?: CallOverrides): Promise<string>;

  keep3rV1Proxy(overrides?: CallOverrides): Promise<string>;

  keepers(overrides?: CallOverrides): Promise<string[]>;

  kp3rWethPool(overrides?: CallOverrides): Promise<string>;

  liquidityAmount(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidityMinimum(overrides?: CallOverrides): Promise<BigNumber>;

  observeLiquidity(
    _liquidity: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      current: BigNumber;
      difference: BigNumber;
      period: BigNumber;
    }
  >;

  pendingBonds(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  pendingUnbonds(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteLiquidity(
    _liquidity: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeDisputer(
    _disputer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSlasher(
    _slasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeLiquidity(
    _liquidity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

  rewardedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setApprovedLiquidity(
    _liquidity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondTime(
    _bondTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInflationPeriod(
    _inflationPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJob(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJobLiquidity(
    _job: string,
    _liquidity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rHelper(
    _keep3rHelper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rV1(
    _keep3rV1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rV1Proxy(
    _keep3rV1Proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKp3rWethPool(
    _kp3rWethPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityMinimum(
    _liquidityMinimum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevokedLiquidity(
    _liquidity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardPeriodTime(
    _rewardPeriodTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnbondTime(
    _unbondTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  totalJobCredits(_job: string, overrides?: CallOverrides): Promise<BigNumber>;

  unbondLiquidityFromJob(
    _job: string,
    _liquidity: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

  viewTickCache(
    _liquidity: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      current: BigNumber;
      difference: BigNumber;
      period: BigNumber;
    }
  >;

  viewTickOrder(
    _liquidity: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawLiquidityFromJob(
    _job: string,
    _liquidity: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workCompleted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  workedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    acceptJobOwnership(_job: string, overrides?: CallOverrides): Promise<void>;

    addDisputer(_disputer: string, overrides?: CallOverrides): Promise<void>;

    addLiquidityToJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addSlasher(_slasher: string, overrides?: CallOverrides): Promise<void>;

    approveLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedLiquidities(overrides?: CallOverrides): Promise<string[]>;

    bondTime(overrides?: CallOverrides): Promise<BigNumber>;

    bonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canActivateAfter(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canWithdrawAfter(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeJobOwnership(
      _job: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disputers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    disputes(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    firstSeen(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    forceLiquidityCreditsToJob(
      _job: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    hasBonded(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    internalJobLiquidities(
      _job: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    internalSettleJobAccountance(
      _job: string,
      overrides?: CallOverrides
    ): Promise<void>;

    jobLiquidityCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

    jobPendingOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

    jobPeriodCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobTokenCredits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobs(overrides?: CallOverrides): Promise<string[]>;

    keep3rHelper(overrides?: CallOverrides): Promise<string>;

    keep3rV1(overrides?: CallOverrides): Promise<string>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<string>;

    keepers(overrides?: CallOverrides): Promise<string[]>;

    kp3rWethPool(overrides?: CallOverrides): Promise<string>;

    liquidityAmount(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    observeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        current: BigNumber;
        difference: BigNumber;
        period: BigNumber;
      }
    >;

    pendingBonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    pendingUnbonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteLiquidity(
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDisputer(_disputer: string, overrides?: CallOverrides): Promise<void>;

    removeSlasher(_slasher: string, overrides?: CallOverrides): Promise<void>;

    revokeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

    rewardedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setApprovedLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondTime(
      _bondTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInflationPeriod(
      _inflationPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setJob(_job: string, overrides?: CallOverrides): Promise<void>;

    setJobLiquidity(
      _job: string,
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setKeep3rHelper(
      _keep3rHelper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeep3rV1(_keep3rV1: string, overrides?: CallOverrides): Promise<void>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKp3rWethPool(
      _kp3rWethPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityMinimum(
      _liquidityMinimum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevokedLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPeriodTime(
      _rewardPeriodTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnbondTime(
      _unbondTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    totalJobCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbondLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

    viewTickCache(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        current: BigNumber;
        difference: BigNumber;
        period: BigNumber;
      }
    >;

    viewTickOrder(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    workCompleted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    workedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BondTimeChange(uint256)"(
      _bondTime?: null
    ): TypedEventFilter<[BigNumber], { _bondTime: BigNumber }>;

    BondTimeChange(
      _bondTime?: null
    ): TypedEventFilter<[BigNumber], { _bondTime: BigNumber }>;

    "Bonding(address,address,uint256)"(
      _keeper?: string | null,
      _bonding?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeper: string; _bonding: string; _amount: BigNumber }
    >;

    Bonding(
      _keeper?: string | null,
      _bonding?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeper: string; _bonding: string; _amount: BigNumber }
    >;

    "DisputerAdded(address)"(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    DisputerAdded(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    "DisputerRemoved(address)"(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    DisputerRemoved(
      _disputer?: null
    ): TypedEventFilter<[string], { _disputer: string }>;

    "FeeChange(uint256)"(
      _fee?: null
    ): TypedEventFilter<[BigNumber], { _fee: BigNumber }>;

    FeeChange(_fee?: null): TypedEventFilter<[BigNumber], { _fee: BigNumber }>;

    "GovernanceProposal(address)"(
      _pendingGovernance?: null
    ): TypedEventFilter<[string], { _pendingGovernance: string }>;

    GovernanceProposal(
      _pendingGovernance?: null
    ): TypedEventFilter<[string], { _pendingGovernance: string }>;

    "GovernanceSet(address)"(
      _governance?: null
    ): TypedEventFilter<[string], { _governance: string }>;

    GovernanceSet(
      _governance?: null
    ): TypedEventFilter<[string], { _governance: string }>;

    "InflationPeriodChange(uint256)"(
      _inflationPeriod?: null
    ): TypedEventFilter<[BigNumber], { _inflationPeriod: BigNumber }>;

    InflationPeriodChange(
      _inflationPeriod?: null
    ): TypedEventFilter<[BigNumber], { _inflationPeriod: BigNumber }>;

    "JobOwnershipAssent(address,address,address)"(
      _job?: string | null,
      _previousOwner?: string | null,
      _newOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _job: string; _previousOwner: string; _newOwner: string }
    >;

    JobOwnershipAssent(
      _job?: string | null,
      _previousOwner?: string | null,
      _newOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _job: string; _previousOwner: string; _newOwner: string }
    >;

    "JobOwnershipChange(address,address,address)"(
      _job?: string | null,
      _owner?: string | null,
      _pendingOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _job: string; _owner: string; _pendingOwner: string }
    >;

    JobOwnershipChange(
      _job?: string | null,
      _owner?: string | null,
      _pendingOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _job: string; _owner: string; _pendingOwner: string }
    >;

    "Keep3rHelperChange(address)"(
      _keep3rHelper?: null
    ): TypedEventFilter<[string], { _keep3rHelper: string }>;

    Keep3rHelperChange(
      _keep3rHelper?: null
    ): TypedEventFilter<[string], { _keep3rHelper: string }>;

    "Keep3rV1Change(address)"(
      _keep3rV1?: null
    ): TypedEventFilter<[string], { _keep3rV1: string }>;

    Keep3rV1Change(
      _keep3rV1?: null
    ): TypedEventFilter<[string], { _keep3rV1: string }>;

    "Keep3rV1ProxyChange(address)"(
      _keep3rV1Proxy?: null
    ): TypedEventFilter<[string], { _keep3rV1Proxy: string }>;

    Keep3rV1ProxyChange(
      _keep3rV1Proxy?: null
    ): TypedEventFilter<[string], { _keep3rV1Proxy: string }>;

    "Kp3rWethPoolChange(address)"(
      _kp3rWethPool?: null
    ): TypedEventFilter<[string], { _kp3rWethPool: string }>;

    Kp3rWethPoolChange(
      _kp3rWethPool?: null
    ): TypedEventFilter<[string], { _kp3rWethPool: string }>;

    "LiquidityAddition(address,address,address,uint256)"(
      _job?: string | null,
      _liquidity?: string | null,
      _provider?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _job: string;
        _liquidity: string;
        _provider: string;
        _amount: BigNumber;
      }
    >;

    LiquidityAddition(
      _job?: string | null,
      _liquidity?: string | null,
      _provider?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _job: string;
        _liquidity: string;
        _provider: string;
        _amount: BigNumber;
      }
    >;

    "LiquidityApproval(address)"(
      _liquidity?: null
    ): TypedEventFilter<[string], { _liquidity: string }>;

    LiquidityApproval(
      _liquidity?: null
    ): TypedEventFilter<[string], { _liquidity: string }>;

    "LiquidityCreditsForced(address,uint256,uint256)"(
      _job?: string | null,
      _rewardedAt?: null,
      _currentCredits?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _job: string; _rewardedAt: BigNumber; _currentCredits: BigNumber }
    >;

    LiquidityCreditsForced(
      _job?: string | null,
      _rewardedAt?: null,
      _currentCredits?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _job: string; _rewardedAt: BigNumber; _currentCredits: BigNumber }
    >;

    "LiquidityCreditsReward(address,uint256,uint256,uint256)"(
      _job?: string | null,
      _rewardedAt?: null,
      _currentCredits?: null,
      _periodCredits?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _job: string;
        _rewardedAt: BigNumber;
        _currentCredits: BigNumber;
        _periodCredits: BigNumber;
      }
    >;

    LiquidityCreditsReward(
      _job?: string | null,
      _rewardedAt?: null,
      _currentCredits?: null,
      _periodCredits?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _job: string;
        _rewardedAt: BigNumber;
        _currentCredits: BigNumber;
        _periodCredits: BigNumber;
      }
    >;

    "LiquidityMinimumChange(uint256)"(
      _liquidityMinimum?: null
    ): TypedEventFilter<[BigNumber], { _liquidityMinimum: BigNumber }>;

    LiquidityMinimumChange(
      _liquidityMinimum?: null
    ): TypedEventFilter<[BigNumber], { _liquidityMinimum: BigNumber }>;

    "LiquidityRevocation(address)"(
      _liquidity?: null
    ): TypedEventFilter<[string], { _liquidity: string }>;

    LiquidityRevocation(
      _liquidity?: null
    ): TypedEventFilter<[string], { _liquidity: string }>;

    "LiquidityWithdrawal(address,address,address,uint256)"(
      _job?: string | null,
      _liquidity?: string | null,
      _receiver?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _job: string;
        _liquidity: string;
        _receiver: string;
        _amount: BigNumber;
      }
    >;

    LiquidityWithdrawal(
      _job?: string | null,
      _liquidity?: string | null,
      _receiver?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        _job: string;
        _liquidity: string;
        _receiver: string;
        _amount: BigNumber;
      }
    >;

    "RewardPeriodTimeChange(uint256)"(
      _rewardPeriodTime?: null
    ): TypedEventFilter<[BigNumber], { _rewardPeriodTime: BigNumber }>;

    RewardPeriodTimeChange(
      _rewardPeriodTime?: null
    ): TypedEventFilter<[BigNumber], { _rewardPeriodTime: BigNumber }>;

    "SlasherAdded(address)"(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    SlasherAdded(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    "SlasherRemoved(address)"(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    SlasherRemoved(
      _slasher?: null
    ): TypedEventFilter<[string], { _slasher: string }>;

    "UnbondTimeChange(uint256)"(
      _unbondTime?: null
    ): TypedEventFilter<[BigNumber], { _unbondTime: BigNumber }>;

    UnbondTimeChange(
      _unbondTime?: null
    ): TypedEventFilter<[BigNumber], { _unbondTime: BigNumber }>;

    "Unbonding(address,address,uint256)"(
      _keeperOrJob?: string | null,
      _unbonding?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeperOrJob: string; _unbonding: string; _amount: BigNumber }
    >;

    Unbonding(
      _keeperOrJob?: string | null,
      _unbonding?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _keeperOrJob: string; _unbonding: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptJobOwnership(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityToJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedLiquidities(overrides?: CallOverrides): Promise<BigNumber>;

    bondTime(overrides?: CallOverrides): Promise<BigNumber>;

    bonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canActivateAfter(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canWithdrawAfter(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeJobOwnership(
      _job: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    disputes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    firstSeen(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    forceLiquidityCreditsToJob(
      _job: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    hasBonded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    internalJobLiquidities(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    internalSettleJobAccountance(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jobLiquidityCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    jobPendingOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobPeriodCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobTokenCredits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobs(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rHelper(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rV1(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<BigNumber>;

    keepers(overrides?: CallOverrides): Promise<BigNumber>;

    kp3rWethPool(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityAmount(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    observeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingBonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    pendingUnbonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteLiquidity(
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

    rewardedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setApprovedLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondTime(
      _bondTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInflationPeriod(
      _inflationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJobLiquidity(
      _job: string,
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rHelper(
      _keep3rHelper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rV1(
      _keep3rV1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKp3rWethPool(
      _kp3rWethPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityMinimum(
      _liquidityMinimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevokedLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardPeriodTime(
      _rewardPeriodTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnbondTime(
      _unbondTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalJobCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbondLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

    viewTickCache(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewTickOrder(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workCompleted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    workedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptJobOwnership(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityToJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedLiquidities(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canActivateAfter(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canWithdrawAfter(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeJobOwnership(
      _job: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstSeen(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceLiquidityCreditsToJob(
      _job: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasBonded(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    internalJobLiquidities(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    internalSettleJobAccountance(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jobLiquidityCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobPendingOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobPeriodCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobTokenCredits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keepers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kp3rWethPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityAmount(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityMinimum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    observeLiquidity(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingBonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingUnbonds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteLiquidity(
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSlasher(
      _slasher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPeriodTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardedAt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovedLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondTime(
      _bondTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInflationPeriod(
      _inflationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJobLiquidity(
      _job: string,
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rHelper(
      _keep3rHelper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rV1(
      _keep3rV1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKp3rWethPool(
      _kp3rWethPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityMinimum(
      _liquidityMinimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevokedLiquidity(
      _liquidity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPeriodTime(
      _rewardPeriodTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnbondTime(
      _unbondTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalJobCredits(
      _job: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unbondLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbondTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewTickCache(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewTickOrder(
      _liquidity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLiquidityFromJob(
      _job: string,
      _liquidity: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workCompleted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workedAt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
