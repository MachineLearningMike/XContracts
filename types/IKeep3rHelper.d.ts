/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKeep3rHelperInterface extends ethers.utils.Interface {
  functions: {
    "bonds(address)": FunctionFragment;
    "getKP3RsAtTick(uint256,int56,uint256)": FunctionFragment;
    "getPaymentParams(uint256)": FunctionFragment;
    "getPoolTokens(address)": FunctionFragment;
    "getQuoteAtTick(uint128,int56,uint256)": FunctionFragment;
    "getRewardAmount(uint256)": FunctionFragment;
    "getRewardAmountFor(address,uint256)": FunctionFragment;
    "getRewardBoostFor(uint256)": FunctionFragment;
    "isKP3RToken0(address)": FunctionFragment;
    "observe(address,uint32[])": FunctionFragment;
    "quote(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bonds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getKP3RsAtTick",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAtTick",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardAmountFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardBoostFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isKP3RToken0",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "observe",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "quote", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "bonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKP3RsAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAmountFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardBoostFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKP3RToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "observe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;

  events: {};
}

export class IKeep3rHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKeep3rHelperInterface;

  functions: {
    bonds(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountBonded: BigNumber }>;

    getKP3RsAtTick(
      _liquidityAmount: BigNumberish,
      _tickDifference: BigNumberish,
      _timeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _kp3rAmount: BigNumber }>;

    getPaymentParams(
      _bonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _boost: BigNumber;
        _oneEthQuote: BigNumber;
        _extra: BigNumber;
      }
    >;

    getPoolTokens(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _token0: string; _token1: string }>;

    getQuoteAtTick(
      _baseAmount: BigNumberish,
      _tickDifference: BigNumberish,
      _timeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _quoteAmount: BigNumber }>;

    getRewardAmount(
      _gasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    getRewardAmountFor(
      _keeper: string,
      _gasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _kp3r: BigNumber }>;

    getRewardBoostFor(
      _bonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardBoost: BigNumber }>;

    isKP3RToken0(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isKP3RToken0: boolean }>;

    observe(
      _pool: string,
      _secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        _tickCumulative1: BigNumber;
        _tickCumulative2: BigNumber;
        _success: boolean;
      }
    >;

    quote(
      _eth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountOut: BigNumber }>;
  };

  bonds(_keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

  getKP3RsAtTick(
    _liquidityAmount: BigNumberish,
    _tickDifference: BigNumberish,
    _timeInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPaymentParams(
    _bonds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _boost: BigNumber;
      _oneEthQuote: BigNumber;
      _extra: BigNumber;
    }
  >;

  getPoolTokens(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { _token0: string; _token1: string }>;

  getQuoteAtTick(
    _baseAmount: BigNumberish,
    _tickDifference: BigNumberish,
    _timeInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardAmount(
    _gasUsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardAmountFor(
    _keeper: string,
    _gasUsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardBoostFor(
    _bonds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isKP3RToken0(_pool: string, overrides?: CallOverrides): Promise<boolean>;

  observe(
    _pool: string,
    _secondsAgo: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      _tickCumulative1: BigNumber;
      _tickCumulative2: BigNumber;
      _success: boolean;
    }
  >;

  quote(_eth: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bonds(_keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

    getKP3RsAtTick(
      _liquidityAmount: BigNumberish,
      _tickDifference: BigNumberish,
      _timeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentParams(
      _bonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _boost: BigNumber;
        _oneEthQuote: BigNumber;
        _extra: BigNumber;
      }
    >;

    getPoolTokens(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _token0: string; _token1: string }>;

    getQuoteAtTick(
      _baseAmount: BigNumberish,
      _tickDifference: BigNumberish,
      _timeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAmount(
      _gasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAmountFor(
      _keeper: string,
      _gasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardBoostFor(
      _bonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKP3RToken0(_pool: string, overrides?: CallOverrides): Promise<boolean>;

    observe(
      _pool: string,
      _secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        _tickCumulative1: BigNumber;
        _tickCumulative2: BigNumber;
        _success: boolean;
      }
    >;

    quote(_eth: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    bonds(_keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

    getKP3RsAtTick(
      _liquidityAmount: BigNumberish,
      _tickDifference: BigNumberish,
      _timeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentParams(
      _bonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolTokens(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteAtTick(
      _baseAmount: BigNumberish,
      _tickDifference: BigNumberish,
      _timeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAmount(
      _gasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAmountFor(
      _keeper: string,
      _gasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardBoostFor(
      _bonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKP3RToken0(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    observe(
      _pool: string,
      _secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(_eth: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bonds(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKP3RsAtTick(
      _liquidityAmount: BigNumberish,
      _tickDifference: BigNumberish,
      _timeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentParams(
      _bonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolTokens(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteAtTick(
      _baseAmount: BigNumberish,
      _tickDifference: BigNumberish,
      _timeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardAmount(
      _gasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardAmountFor(
      _keeper: string,
      _gasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardBoostFor(
      _bonds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKP3RToken0(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    observe(
      _pool: string,
      _secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      _eth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
